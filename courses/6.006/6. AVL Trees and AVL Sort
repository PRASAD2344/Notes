Height of a node = max(height(left),height(right))+1; For empty child we will height as -1 to eliminate few checks
Datastructure augmentation to store height of every node and weight/difference datatype i.e., while will weight more
AVL trees- Require height of left & right child to be differed by at most -1 to +1
AVL trees are balanced i.e., height of tree should be log(n)
Rotation - Left Rotate and Right Rotate, based on root moving - Read Algorithm - Double Rotation

AVL Insert
1. Simple BST Insert
2. Fix AVL property from changed node up to the root

AVL Sort for n elements
1. Insert - O(nlogn) - n*h where h is logn
2. InOrder Traversal - O(n)

Find successor & predeseccor which not possible in heap tress

AbstractDataType
1. Insert
2. Delete
3. Find min 
4. Find next smallest and next largest

We can have priority queue using AVL & Heap trees but if we want 4 we will go with AVL
Heap don't take extra space but here we have constant pointer space problem


